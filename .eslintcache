[{"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\index.tsx":"1","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\reportWebVitals.ts":"2","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\App.tsx":"3","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\Profile.tsx":"4","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Navbar\\Navbar.tsx":"5","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Header\\Header.tsx":"6","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\DIalogs.tsx":"9","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\News\\News.tsx":"10","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Settings\\Settings.tsx":"11","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Music\\Music.tsx":"12","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\Dialogs.tsx":"13","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"14","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"15","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx":"16","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\store.tsx":"17","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"18","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx":"19","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\redux-store.ts":"20","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\profile-reducer.ts":"21","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\dialogs-reducer.ts":"22","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Users\\UsersContainer.tsx":"23","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\users-reducer.ts":"24","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Users\\Users.tsx":"25","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\common\\Preloader\\Preloader.tsx":"26","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileContainer.tsx":"27","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\auth-reducer.ts":"28","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Header\\HeaderContainer.tsx":"29","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\api\\api.ts":"30"},{"size":1090,"mtime":1615213756334,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":1609746806505,"results":"33","hashOfConfig":"32"},{"size":1521,"mtime":1616178786325,"results":"34","hashOfConfig":"32"},{"size":437,"mtime":1616153331575,"results":"35","hashOfConfig":"32"},{"size":1277,"mtime":1615633130394,"results":"36","hashOfConfig":"32"},{"size":620,"mtime":1616179511677,"results":"37","hashOfConfig":"32"},{"size":1906,"mtime":1614073454015,"results":"38","hashOfConfig":"32"},{"size":463,"mtime":1610272784376,"results":"39","hashOfConfig":"32"},{"size":164,"mtime":1610461175847,"results":"40","hashOfConfig":"32"},{"size":153,"mtime":1610527214777,"results":"41","hashOfConfig":"32"},{"size":169,"mtime":1610527214699,"results":"42","hashOfConfig":"32"},{"size":144,"mtime":1610527214366,"results":"43","hashOfConfig":"32"},{"size":2281,"mtime":1614767846200,"results":"44","hashOfConfig":"32"},{"size":773,"mtime":1616160737002,"results":"45","hashOfConfig":"32"},{"size":455,"mtime":1613212361848,"results":"46","hashOfConfig":"32"},{"size":317,"mtime":1612102721156,"results":"47","hashOfConfig":"32"},{"size":3295,"mtime":1613828818252,"results":"48","hashOfConfig":"32"},{"size":2274,"mtime":1615205853963,"results":"49","hashOfConfig":"32"},{"size":2538,"mtime":1615044289252,"results":"50","hashOfConfig":"32"},{"size":1119,"mtime":1616172579040,"results":"51","hashOfConfig":"32"},{"size":3092,"mtime":1616161603173,"results":"52","hashOfConfig":"32"},{"size":2436,"mtime":1616141317326,"results":"53","hashOfConfig":"32"},{"size":4401,"mtime":1616496726992,"results":"54","hashOfConfig":"32"},{"size":4311,"mtime":1616496518949,"results":"55","hashOfConfig":"32"},{"size":4017,"mtime":1616496669151,"results":"56","hashOfConfig":"32"},{"size":209,"mtime":1615975160214,"results":"57","hashOfConfig":"32"},{"size":1770,"mtime":1616160613570,"results":"58","hashOfConfig":"32"},{"size":1140,"mtime":1616175911290,"results":"59","hashOfConfig":"32"},{"size":1536,"mtime":1616179511528,"results":"60","hashOfConfig":"32"},{"size":693,"mtime":1616411609699,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"149tegf",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\index.tsx",[],["137","138"],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\reportWebVitals.ts",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\App.tsx",["139"],"import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Route} from 'react-router-dom';\nimport Music from './components/Music/Music';\nimport News from \"./components/News/News\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileInfo/ProfileContainer\";\nimport HeaderContainer from './components/Header/HeaderContainer';\n\n\nfunction App() {\n\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer />\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path='/dialogs' render={() => <DialogsContainer />}/>\n                <Route path='/profile/:userId?' render={() => <ProfileContainer />}/>\n                                              {/*profilePage={props.state.profilePage}*/}\n                                              {/*dispatch={props.dispatch}*/}\n                <Route path='/news' render={() => <News/>}/>\n                <Route path='/music' render={() => <Music/>}/>\n                <Route path='/settings' render={() => <Settings/>}/>\n                <Route path='/users' render={() => <UsersContainer/>}/>\n                {/*<Route path='/friends' render={() => <Friends/>}/>*/}\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\Profile.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Header\\Header.tsx",["140"],"import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport {HeaderContainerType, } from \"./HeaderContainer\";\r\n\r\nconst Header = (props: HeaderContainerType) => {\r\n    return (\r\n        <header className={s.header}><img\r\n            src='https://avatars.mds.yandex.net/get-zen-logos/246004/pub_5a4a6b5d8309056de5514434_5a5a26fe5a104f80ac72c2ed/xxh'/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? props.login :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>)\r\n}\r\nexport default Header","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",["141"],"import s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i09.fotocdn.net/s110/003e603e9e1b6f84/user_l/2438638284.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>likes</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\DIalogs.tsx",["142"],"import s from './Dialogs.module.css'\r\n\r\nconst Dialogs =() => {\r\n    return (\r\n        <div>\r\n            Dialogs\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs",["143","144"],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\News\\News.tsx",["145"],"import s from './News.module.css'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Settings\\Settings.tsx",["146"],"import s from './Settings.module.css'\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Music\\Music.tsx",["147"],"import s from './Music.module.css'\r\n\r\nconst Music =() => {\r\n    return (\r\n    <div>\r\n        Music\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Music","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\Dialogs.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["148","149"],"import s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n}\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{props.profile.fullName}</h1>\r\n            <div>\r\n                <img src='https://www.selltoearn.com/2018/norway-pier-dock-landscape120419.jpg'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src = {props.profile.photos?.large}/>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\store.tsx",["150"],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["151"],"import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//\r\n//     // const postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n//     // const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n//\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {//мы нашу компоненту обернули ф-цией, кот принимает store и обернули тегом StoreContext.Consumer\r\n//             (store) => {\r\n//                 let state = store.getState();\r\n//                 const addPost = () => {\r\n//                     store.dispatch(addPostActionCreator());//addPost вызывается от имени  props-ов\r\n//                 }\r\n//                 const onPostChange = (text: string) => {\r\n//                     let action = updateNewPostTextActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//\r\n//                 return <MyPosts updateNewPostText={onPostChange}\r\n//                                 addPost={addPost}\r\n//                                 posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}/>\r\n//             }\r\n//         }\r\n//     </ StoreContext.Consumer>\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n         dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\nexport default MyPostContainer;","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx",["152","153","154"],"import React from 'react'\r\nimport {AppStateType, StoreType} from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageBody: string\r\n}\r\ntype DialogsPropsType = {\r\n    store: StoreType\r\n    // state: AppStateType\r\n    // dispatch: (action: ActionsTypes) => void\r\n\r\n}\r\n// const DialogsContainer = () => {\r\n//\r\n//     // let newMassageElement = React.createRef<HTMLTextAreaElement>()\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {\r\n//             (store: StoreType) => {\r\n//                 let onSendMessageClick = () => {\r\n//                     store.dispatch(sendMessageCreator())\r\n//                 }\r\n//\r\n//                 let onNewMessageChange = (body: string) => {\r\n//                     store.dispatch(updateNewMessageBodyCreator(body))//диспатчим то, что вернул нам action creator\r\n//                 }\r\n//                 return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                                 sendMessage={onSendMessageClick}\r\n//                                 dialogsPage={store.getState().dialogsPage}/>\r\n//             }\r\n//         }\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {//смысл этой фции: замапить state на пропсы(превратить часть state в пропсы)\r\n    return {\r\n        dialogsPage:state.dialogsPage//этот объект настраивает данные. кот мы возьмем из state\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        updateNewMessageBody: (body: string)=>{\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage:()=>{\r\n            dispatch(sendMessageCreator())\r\n        }\r\n\r\n    }//этот объект callback-и, кот мы будем отправлять в презентационн компоненту\r\n\r\n}\r\n\r\nconst SuperDialogsContainer = connect(mapStateToProps,mapDispatchToProps )(Dialogs);//первым вызовом функции connect мы настраиваем нашу контейнерную компоненту\r\n\r\n\r\nexport default SuperDialogsContainer","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\redux-store.ts",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\profile-reducer.ts",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\dialogs-reducer.ts",["155"],"import {ProfileActionsTypes} from \"./profile-reducer\";\r\nimport {UsersActionsTypes} from \"./users-reducer\";\r\n\r\ntype ActionsTypes = ProfileActionsTypes | DialogsActionsTypes | UsersActionsTypes\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nlet initialState = {//писать :InitialStateType не надо ниже при определении типа мы исходим из этого объекта. Чтобы не было циклич зависимости\r\n    dialogs: [\r\n        {id: 1, name: 'Gragina'},\r\n        {id: 2, name: 'Jenya'},\r\n        {id: 3, name: 'Nastya'},\r\n        {id: 4, name: 'Vika'},\r\n        {id: 5, name: 'Alyona'},\r\n        {id: 6, name: 'Denis'}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'Can we meet?'},\r\n        {id: 4, message: 'What are you doing'}\r\n    ] as Array<MessagesType>,//воспринимай это массив как массив типа\r\n    newMessageBody: ''\r\n}\r\n\r\nexport type DialogsActionsTypes =\r\n    ReturnType<typeof sendMessageCreator> |\r\n    ReturnType<typeof updateNewMessageBodyCreator>\r\n\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY' //создаем тип action-a\r\nconst SEND_MESSAGE = 'SEND_MESSAGE' //создаем тип action-a\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 5, message: body}]\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE}) as const//объект как константа\r\nexport const updateNewMessageBodyCreator = (body: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    body: body\r\n}) as const//воспринимай этот  объект, как константу\r\n\r\n\r\nexport default dialogsReducer;","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Users\\UsersContainer.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\users-reducer.ts",["156"],"export type UserType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nexport type UsersActionsTypes =\r\n    ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_USERS_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nconst initialState: InitialStateType = {//однораз объект в случае, если state сюда не придет, будешь этим initialState\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,//изначально ничего не получаем\r\n    followingInProgress: []\r\n};\r\n\r\ntype followingInProgressType = {\r\n\r\n}\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id=>id !== action.userId)\r\n        }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => ({type: FOLLOW, userId}) as const//объект как константа\r\nexport const unfollow = (userId: number) => ({type: UNFOLLOW, userId}) as const//воспринимай этот бъект, как константу\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const//воспринимай этот бъект, как константу\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const//воспринимай этот бъект, как константу\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n}) as const//воспринимай этот бъект, как константу\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleFollowingProgress = (isFetching: boolean,userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\n\r\nexport default usersReducer","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Users\\Users.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\common\\Preloader\\Preloader.tsx",["157"],"import preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = () => {\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileContainer.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\redux\\auth-reducer.ts",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\components\\Header\\HeaderContainer.tsx",[],"D:\\IT-KAMASUTRA\\react-way-of-samurai-2\\my-app\\src\\api\\api.ts",[],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":8,"column":38,"nodeType":"168","endLine":9,"endColumn":130},{"ruleId":"166","severity":1,"message":"167","line":11,"column":13,"nodeType":"168","endLine":11,"endColumn":93},{"ruleId":"162","severity":1,"message":"169","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":9},{"ruleId":"158","replacedBy":"170"},{"ruleId":"160","replacedBy":"171"},{"ruleId":"162","severity":1,"message":"169","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":9},{"ruleId":"162","severity":1,"message":"169","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":9},{"ruleId":"162","severity":1,"message":"169","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":9},{"ruleId":"166","severity":1,"message":"167","line":16,"column":17,"nodeType":"168","endLine":16,"endColumn":98},{"ruleId":"166","severity":1,"message":"167","line":19,"column":17,"nodeType":"168","endLine":19,"endColumn":59},{"ruleId":"162","severity":1,"message":"172","line":2,"column":25,"nodeType":"164","messageId":"165","endLine":2,"endColumn":33},{"ruleId":"162","severity":1,"message":"173","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":13},{"ruleId":"162","severity":1,"message":"173","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":13},{"ruleId":"162","severity":1,"message":"174","line":17,"column":6,"nodeType":"164","messageId":"165","endLine":17,"endColumn":21},{"ruleId":"162","severity":1,"message":"175","line":22,"column":6,"nodeType":"164","messageId":"165","endLine":22,"endColumn":22},{"ruleId":"176","severity":1,"message":"177","line":60,"column":5,"nodeType":"178","messageId":"179","endLine":60,"endColumn":18},{"ruleId":"162","severity":1,"message":"180","line":47,"column":6,"nodeType":"164","messageId":"165","endLine":47,"endColumn":29},{"ruleId":"166","severity":1,"message":"167","line":6,"column":9,"nodeType":"168","endLine":6,"endColumn":31},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'s' is defined but never used.",["181"],["182"],"'ADD_POST' is defined but never used.","'React' is defined but never used.","'DialogsPageType' is defined but never used.","'DialogsPropsType' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'followingInProgressType' is defined but never used.","no-global-assign","no-unsafe-negation"]